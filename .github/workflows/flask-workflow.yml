name: Deploy flask-app

on:
  workflow_run:
    workflows: ["EKS Cluster Creation"]
    types:
      - completed

env:
  AWS_REGION: me-central-1
  EKS_CLUSTER_NAME: test
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}  
  ECR_REPOSITORY: flask-dev-repo  

permissions:
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install -r requirements.txt
        pip install pytest

    - name: Run tests
      run: |
        . venv/bin/activate
        python ./tests/test_hello.py

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install envsubst
      run: |
        sudo apt-get install -y gettext-base
   
    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: v1.28.3
      id: install 

    - name: Debug Kubeconfig
      run: |
        echo "Kubeconfig Content:"
        echo "${{ secrets.KUBE_CONFIG_DATA }}"

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }} 

    - name: Update kubeconfig
      run: aws eks --region me-central-1 update-kubeconfig --name $EKS_CLUSTER_NAME     

    - name: Login to Amazon ECR    
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
      shell: /usr/bin/bash -e {0}
    - name: Deploy to Kubernetes Cluster
      env:
        AWS_REGION: me-central-1
        EKS_CLUSTER_NAME: EKS-test
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        ECR_REPOSITORY: flask-dev-repo
        AWS_DEFAULT_REGION: me-central-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        NODE_NAME=$(kubectl get nodes -o jsonpath='{.items[0].metadata.name}')      
        sed -i "s/nodeName:/nodeName:$NODE_NAME:/g" k8s/flask-deployment.yml
        cat k8s/flask-deployment.yml | envsubst | kubectl apply -f -
        cat k8s/flask-service.yml | envsubst | kubectl apply -f -
        cat k8s/flask-ingress.yml | envsubst | kubectl apply -f -
